plugins {
  id 'kotlin'
  id 'java-library'
  id 'com.google.protobuf'
  id 'maven-publish'
  id 'signing'
}
def getArtificatId = { ->
  return "sdk-protobuf"
}
def getVersionName = { ->
  return System.getenv('TAG_NAME') ?: "1.0.0"
}


def snapshotRepositoryUrl = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
    : "https://s01.oss.sonatype.org/content/repositories/snapshots/"

def repositoryUsername = project.findProperty("nexus.username") ?: hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""

def repositoryPassword = project.findProperty("nexus.pw") ?: hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""



sourceSets {
  main.java.srcDirs += "${protobuf.generatedFilesBaseDir}/main/javalite"
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  testImplementation rootProject.ext.dependencies["junit"]
  api 'com.google.protobuf:protobuf-java:3.6.1'
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

protobuf {
  protoc {
    // You still need protoc like in the non-Android case
    if (osdetector.os == "osx") {
      artifact = 'com.google.protobuf:protoc:3.19.4:osx-x86_64'
    } else {
      artifact = 'com.google.protobuf:protoc:3.19.4'
    }
  }
  plugins {
    javalite {
      // The codegen for lite comes as a separate artifact
      artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0:osx-x86_64'
    }
  }
  generateProtoTasks {
    all().each { task ->
      task.builtins {
        // In most cases you don't need the full Java output
        // if you use the lite output.
        remove java
      }
      task.plugins {
        javalite {}
      }
    }
  }
}
java {
  withJavadocJar()
  withSourcesJar()
}
task arcGen(dependsOn: ['generateProto']) {
}


sourceCompatibility = "8"
targetCompatibility = "8"

compileKotlin {
  kotlinOptions {
    jvmTarget = "1.8"
  }
}
compileTestKotlin {
  kotlinOptions {
    jvmTarget = "1.8"
  }
}

task sourceJar(type: Jar) {
  from sourceSets.main.allJava
//  from android.sourceSets.main.java.srcDirs
  archiveClassifier.set("sources")
}

task javadocForMaven(type: Jar) {
  archiveClassifier.set("javadoc")
}

signing {
  sign publishing.publications
}

publishing {
  repositories {
    maven {
            url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2")
//      url = uri(snapshotRepositoryUrl)
      credentials {
        username = repositoryUsername
        password = repositoryPassword
      }
    }
  }
  publications {
    maven(MavenPublication) {
      groupId 'io.arcblock.did'
      artifactId getArtificatId()
      version getVersionName()
      from components.java
      pom {
        name = artifactId
        description = 'A android library for generating DID identicons.'
        url = 'https://github.com/ArcBlock/did-wallet-sdk-android'
        licenses {
          license {
            name = 'The Apache Software License, Version 2.0'
            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        developers {
          developer {
            id = 'ArcBlock'
            name = 'ArcBlock'
            email = 'app@arcblock.io'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/ArcBlock/did-wallet-sdk-android.git'
          developerConnection = 'scm:git:ssh://git@github.com/ArcBlock/did-wallet-sdk-android.git'
          url = 'https://github.com/ArcBlock/did-wallet-sdk-android'
        }

      }
    }
  }
}