apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
  compileSdkVersion rootProject.ext.android["compileSdkVersion"]
  defaultConfig {
    minSdkVersion rootProject.ext.android["minSdkVersion"]
    targetSdkVersion rootProject.ext.android["targetSdkVersion"]
    versionCode 1
    versionName "1.0"
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }
  buildFeatures {
    viewBinding true
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
  packagingOptions {
    exclude 'META-INF/rxjava.properties'
    exclude 'lib/x86/*.so'
    exclude 'lib/x86_64/*.so'
  }
}

dependencies {
  api(rootProject.ext.dependencies["bitcoinj-core"]) {
    exclude group: 'com.google.protobuf'
  }
  api(rootProject.ext.dependencies["web3j"])
  api(rootProject.ext.dependencies["gson"])
  api 'com.google.protobuf:protobuf-kotlin-lite:3.19.4'
  api('com.google.crypto.tink:tink-android:1.6.1') {
    exclude module: 'protobuf-lite'
  }
  implementation(rootProject.ext.dependencies["semver"])
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
  testImplementation 'junit:junit:4.13.2'
}

def AWS_S3_ACCESSKEY
def AWS_S3_SECRETKEY
try {
  // load local properties
  Properties properties = new Properties()
  InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
  properties.load(inputStream)

  // read key - value
  AWS_S3_ACCESSKEY = properties.getProperty('AWS_S3_ACCESSKEY')
  AWS_S3_SECRETKEY = properties.getProperty('AWS_S3_SECRETKEY')
} catch (FileNotFoundException e) {
  // do nothing
  print(e)
}

publishing {
  repositories {
    maven {
      def releaseUrl = "s3://android-docs.arcblock.io.s3.amazonaws.com/release"
      // def snapshotUrl = "s3://android-docs.arcblock.io.s3.amazonaws.com/snapshot"
      url releaseUrl
      credentials(AwsCredentials) {
        accessKey AWS_S3_ACCESSKEY ? AWS_S3_ACCESSKEY : System.getenv("AWS_S3_ACCESSKEY")
        secretKey AWS_S3_SECRETKEY ? AWS_S3_SECRETKEY : System.getenv("AWS_S3_SECRETKEY")
      }
    }
  }

  publications {
    mavenJava(MavenPublication) {
      groupId 'io.arcblock.walletkit'
      artifactId 'walletkit'
      version rootProject.version
      artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")

      pom.withXml {
        def dependenciesNode = asNode().appendNode('dependencies')
        def finished = []
        def addDependency = { configuration, scope ->
          configuration.allDependencies.each { dep ->
            if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified" || finished.contains(dep))
              return

            finished << dep

            // DefaultProjectDependency (local module) should be resolved first,
            // or its version with be 'unspecified'. Besides we can also get the type
            // after resolving
            def dependencyFiles
            def extension
            def error
            try {
              dependencyFiles = configuration.files(dep)
            } catch (ignored) {
              // Maybe 'Resolving configuration xxx directly is not allowed'
              // Try to resolve with archives configuration any way
              error = ignored
              try {
                dependencyFiles = configurations.archives.files(dep)
              } catch (exception) {
                error = exception
              }
            }
            if (dependencyFiles != null && dependencyFiles.size() > 0) {
              def firstFile = dependencyFiles.first()
              extension = firstFile.name.substring(firstFile.name.lastIndexOf(".") + 1)
            }
            def version = dep.version
            if (version == "unspecified") {
              // This is our last chance, retrieve directly from project property
              version = rootProject.version
              if (version == "unspecified")
                throw new GradleException(
                  "Can not resolve verson of [$dep.name] ${error ? error.message : ''}"
                )
            }

            def node = dependenciesNode.appendNode('dependency')
            node.appendNode('groupId', dep.group)
            node.appendNode('artifactId', dep.name)
            node.appendNode('version', version)
            node.appendNode('scope', scope)
            if (extension) node.appendNode('type', extension)

            // Exclusions (transitive dependencies of the current dependency)
            if (!dep.transitive) {
              // If this dependency is transitive, we should force exclude all its dependencies them from the POM
              final exclusionNode = node.appendNode('exclusions').appendNode('exclusion')
              exclusionNode.appendNode('groupId', '*')
              exclusionNode.appendNode('artifactId', '*')
            } else if (!dep.properties.excludeRules.empty) {
              // Otherwise add specified exclude rules
              final exclusionNode = node.appendNode('exclusions').appendNode('exclusion')
              dep.properties.excludeRules.each { ExcludeRule rule ->
                exclusionNode.appendNode('groupId', rule.group ?: '*')
                exclusionNode.appendNode('artifactId', rule.module ?: '*')
              }
            }
          }
        }

        // actually add
        addDependency(configurations.compile, 'compile')
        addDependency(configurations.provided, 'provided')
        addDependency(configurations.api, 'compile')
        addDependency(configurations.implementation, 'compile')
        addDependency(configurations.compileOnly, 'provided')
        addDependency(configurations.runtimeOnly, 'runtime')
        addDependency(configurations.androidTestCompile, 'test')
        addDependency(configurations.androidTestApi, 'test')
        addDependency(configurations.androidTestImplementation, 'test')
        addDependency(configurations.testCompile, 'test')
        addDependency(configurations.testApi, 'test')
        addDependency(configurations.testImplementation, 'test')

        // Config pom.xml extra info
        asNode().children().last() + {
          name "ArcBlockSdk-WalletKit"
          url "https://github.com/ArcBlock/walletkit-android"
          description "https://github.com/ArcBlock/walletkit-android"
        }
      }

    }
  }

}


